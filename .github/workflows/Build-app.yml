#
# Â© 2024 F1248 <f1248@mailbox.org>
# See LICENSE.txt for license information.
#

name: Build app

on:
    push:
        paths:
            - .github/workflows/Build-app.yml
            - .periphery.yml
            - .swiftformat
            - .swiftlint.yml
            - Genius/**
            - Genius.xcconfig
            - Genius.xcodeproj/**
            - GeniusTests/**
            - Install
            - Makefile
    pull_request:
        paths:
            - .github/workflows/Build-app.yml
            - .periphery.yml
            - .swiftformat
            - .swiftlint.yml
            - Genius/**
            - Genius.xcconfig
            - Genius.xcodeproj/**
            - GeniusTests/**
            - Install
            - Makefile
    workflow_dispatch:

permissions: {}

env:
    GH_TOKEN: ${{ github.token }}
    NSUnbufferedIO: YES

defaults:
    run:
        shell: bash

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    Build-app:
        name: Build app
        permissions:
            attestations: write
            id-token: write
        runs-on: macos-26

        steps:
            - name: Free up disk space
              run: sudo rm -r /System/Library/AssetsV2/com_apple_MobileAsset_*OSSimulatorRuntime

            - name: Select latest installed Xcode version
              uses: maxim-lobanov/setup-xcode@master
              with:
                xcode-version: "26.0.1"

            - name: Prepare Xcode
              run: |
                sudo xcodebuild -license accept
                sudo xcodebuild -runFirstLaunch
                echo "$(xcodebuild -version | tr "\n" " ")selected"

            - name: Checkout
              uses: actions/checkout@main
              with:
                fetch-depth: 0

            - name: Install Periphery
              run: |
                tag=$(gh release --repo peripheryapp/periphery list --json tagName --jq ".[0].tagName")
                curl \
                    https://github.com/peripheryapp/periphery/releases/download/"$tag"/periphery-"$tag".zip \
                    --location \
                    --output periphery.zip
                unzip periphery.zip
                echo "Periphery $(./periphery version) installed"

            - name: Run Periphery
              run: make periphery

            - name: Install SwiftFormat
              run: |
                curl \
                    https://github.com/nicklockwood/SwiftFormat/releases/latest/download/swiftformat.zip \
                    --location \
                    --remote-name
                unzip swiftformat.zip
                echo "SwiftFormat $(./swiftformat --version) installed"

            - name: Run SwiftFormat
              run: make swiftformat

            - name: Install SwiftLint
              run: |
                curl \
                    https://github.com/realm/SwiftLint/releases/latest/download/portable_swiftlint.zip \
                    --location \
                    --remote-name
                unzip portable_swiftlint.zip
                echo "SwiftLint $(./swiftlint version) installed"

            - name: Run SwiftLint lint rules
              run: make swiftlint-lint

            - name: Install xcbeautify
              run: |
                tag=$(gh release --repo cpisciotta/xcbeautify list --json tagName --jq ".[0].tagName")
                curl \
                    https://github.com/cpisciotta/xcbeautify/releases/download/"$tag"/xcbeautify-"$tag"-arm64-apple-macosx.zip \
                    --location \
                    --output xcbeautify.zip
                unzip xcbeautify.zip
                echo "xcbeautify $(./xcbeautify --version) installed"

            - name: Build for testing
              run: make build-for-testing-keep-log

            - name: Run SwiftLint analyzer rules
              run: make swiftlint-analyze-log-exists

            - name: Run tests
              run: make test-without-building

            - name: Build app
              run: make build

            - name: Zip app
              run: zip --recurse-paths --symlinks Genius.zip Genius.app

            - name: Attest build provenance of Genius.zip
              uses: actions/attest-build-provenance@main
              with:
                subject-path: Genius.zip

            - name: Upload Genius.zip
              uses: actions/upload-artifact@main
              with:
                name: Genius # omit `.zip` file extension as it will be added automatically
                path: Genius.zip

            - name: Install create-dmg
              if: github.ref_type == 'tag'
              run: |
                npm install --global create-dmg
                echo "create-dmg $(create-dmg --version) installed"

            - name: Create DMG file
              if: github.ref_type == 'tag'
              run: |
                rm LICENSE.txt # prevent license from being added to DMG file
                create-dmg --no-version-in-filename --no-code-sign Genius.app

            - name: Attest build provenance of Genius.dmg
              if: github.ref_type == 'tag'
              uses: actions/attest-build-provenance@main
              with:
                subject-path: Genius.dmg

            - name: Upload Genius.dmg
              if: github.ref_type == 'tag'
              uses: actions/upload-artifact@main
              with:
                name: Genius.dmg
                path: Genius.dmg

            - name: Zip debug symbols
              run: zip --recurse-paths Debug-Symbols.zip Genius.app.dSYM

            - name: Upload Debug-Symbols.zip
              uses: actions/upload-artifact@main
              with:
                name: Debug-Symbols # omit `.zip` file extension as it will be added automatically
                path: Debug-Symbols.zip
