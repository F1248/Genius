#
# Â© 2024 F1248 <f1248@mailbox.org>
# See LICENSE.txt for license information.
#

name: Build app

on:
    push:
        paths:
            - .github/workflows/Build-app.yml
            - .periphery.yml
            - .swiftformat
            - .swiftlint.yml
            - Genius/**
            - Genius.xcconfig
            - Genius.xcodeproj/**
            - GeniusTests/**
            - Install
    pull_request:
        paths:
            - .github/workflows/Build-app.yml
            - .periphery.yml
            - .swiftformat
            - .swiftlint.yml
            - Genius/**
            - Genius.xcconfig
            - Genius.xcodeproj/**
            - GeniusTests/**
            - Install
    workflow_dispatch:

permissions: {}

env:
    GH_TOKEN: ${{ github.token }}
    NSUnbufferedIO: YES

defaults:
    run:
        shell: bash

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    Build-app:
        name: Build app
        permissions:
            attestations: write
            id-token: write
        runs-on: macos-26

        steps:
            - name: Free up disk space
              run: sudo rm -r /System/Library/AssetsV2/com_apple_MobileAsset_*OSSimulatorRuntime

            - name: Select latest installed Xcode version
              uses: maxim-lobanov/setup-xcode@master
              with:
                xcode-version: latest

            - name: Checkout Build.txt from Xcode mirror
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Build.txt
                sparse-checkout-cone-mode: false

            - name: Check if latest Xcode version is installed
              run: |
                if [[ "$(xcodebuild -version | sed -n "s/Build version //p")" == "$(cat Build.txt)" ]]; then
                    echo "latest_xcode_version_installed=true" >> "$GITHUB_ENV"
                else
                    echo "latest_xcode_version_installed=false" >> "$GITHUB_ENV"
                fi

            - name: Checkout Xcode mirror
              if: env.latest_xcode_version_installed == 'false'
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Xcode.xip-*

            - name: Install unxip
              if: env.latest_xcode_version_installed == 'false'
              run: |
                curl https://github.com/saagarjha/unxip/releases/latest/download/unxip --location --remote-name
                chmod +x unxip
                echo "$(./unxip --version) installed"

            - name: Install and select Xcode
              if: env.latest_xcode_version_installed == 'false'
              run: |
                cat Xcode.xip-* | ./unxip - ~
                sudo xcode-select --switch ~/Xcode*.app

            - name: Prepare Xcode
              run: |
                sudo xcodebuild -license accept
                sudo xcodebuild -runFirstLaunch
                echo "$(xcodebuild -version | tr "\n" " ")selected"

            - name: Checkout
              uses: actions/checkout@main
              with:
                fetch-depth: 0

            - name: Install Periphery
              run: |
                tag=$(gh release --repo peripheryapp/periphery list --json tagName --limit 1 | cut -d "\"" -f 4)
                curl \
                    https://github.com/peripheryapp/periphery/releases/download/"$tag"/periphery-"$tag".zip \
                    --location \
                    --output periphery.zip
                unzip periphery.zip
                echo "Periphery $(./periphery version) installed"

            - name: Run Periphery
              run: ./periphery scan --format github-actions --strict -- -skipPackagePluginValidation

            - name: Install SwiftFormat
              run: |
                curl \
                    https://github.com/nicklockwood/SwiftFormat/releases/latest/download/swiftformat.zip \
                    --location \
                    --remote-name
                unzip swiftformat.zip
                echo "SwiftFormat $(./swiftformat --version) installed"

            - name: Run SwiftFormat
              run: ./swiftformat --lint . --reporter github-actions-log

            - name: Install SwiftLint
              run: |
                curl \
                    https://github.com/realm/SwiftLint/releases/latest/download/portable_swiftlint.zip \
                    --location \
                    --remote-name
                unzip portable_swiftlint.zip
                echo "SwiftLint $(./swiftlint version) installed"

            - name: Run SwiftLint lint rules
              run: ./swiftlint lint --strict --reporter github-actions-logging

            - name: Install xcbeautify
              run: |
                tag=$(gh release --repo cpisciotta/xcbeautify list --json tagName --limit 1 | cut -d "\"" -f 4)
                curl \
                    https://github.com/cpisciotta/xcbeautify/releases/download/"$tag"/xcbeautify-"$tag"-arm64-apple-macosx.zip \
                    --location \
                    --output xcbeautify.zip
                unzip xcbeautify.zip
                echo "xcbeautify $(./xcbeautify --version) installed"

            - name: Build for testing
              run: |
                # work around warning `duplicate -rpath '@executable_path' ignored`
                xcodebuild build-for-testing \
                    -scheme Genius \
                    -destination generic/platform=macOS \
                    -skipPackagePluginValidation \
                    | tee xcodebuild-SwiftLint.log \
                    | grep --invert-match "ld: warning: duplicate -rpath '@executable_path' ignored" \
                    | ./xcbeautify --disable-logging --renderer github-actions \
                    | sed "s/::warning/::error/g" \
                    | tee xcodebuild.log
                if grep --quiet "::error" xcodebuild.log; then
                    exit 1
                fi

            - name: Run SwiftLint analyzer rules
              run: ./swiftlint analyze --strict --reporter github-actions-logging --compiler-log-path xcodebuild-SwiftLint.log

            - name: Run tests
              run: |
                xcodebuild test-without-building \
                    -scheme Genius \
                    -destination platform=macOS,arch=arm64 \
                    -skipPackagePluginValidation \
                    | ./xcbeautify --disable-logging --renderer github-actions \
                    | sed "s/::warning/::error/g" \
                    | tee xcodebuild.log
                if grep --quiet "::error" xcodebuild.log; then
                    exit 1
                fi

            - name: Build app
              run: |
                # work around warnings `Users/*/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/*.pcm: No such file or directory`
                xcodebuild archive \
                    -scheme Genius \
                    -destination generic/platform=macOS \
                    -archivePath Genius \
                    -skipPackagePluginValidation \
                    | grep --invert-match "warning: Users/.*/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/.*.pcm: No such file or directory" \
                    | ./xcbeautify --disable-logging --renderer github-actions \
                    | sed "s/::warning/::error/g" \
                    | tee xcodebuild.log
                if grep --quiet "::error" xcodebuild.log; then
                    exit 1
                fi
                mv Genius.xcarchive/Products/Applications/Genius.app .
                mv Genius.xcarchive/dSYMs/Genius.app.dSYM .

            - name: Zip app
              run: zip --recurse-paths Genius.zip Genius.app

            - name: Attest build provenance
              uses: actions/attest-build-provenance@main
              with:
                subject-path: Genius.zip

            - name: Upload app
              uses: actions/upload-artifact@main
              with:
                name: Genius
                path: Genius.zip

            - name: Zip debug symbols
              run: zip --recurse-paths Debug-Symbols.zip Genius.app.dSYM

            - name: Upload debug symbols
              uses: actions/upload-artifact@main
              with:
                name: Debug Symbols
                path: Debug-Symbols.zip
