name: Build Genius

on:
    push:
        paths:
            - .github/workflows/Build-Genius.yml
            - .periphery.yml
            - .swift-version
            - .swiftformat
            - .swiftlint.yml
            - Genius/**
            - Genius.xcodeproj/**
            - GeniusTests/**
    pull_request:
        paths:
            - .github/workflows/Build-Genius.yml
            - .periphery.yml
            - .swift-version
            - .swiftformat
            - .swiftlint.yml
            - Genius/**
            - Genius.xcodeproj/**
            - GeniusTests/**
    workflow_dispatch:

permissions: {}

env:
    GH_TOKEN: ${{ github.token }}
    NSUnbufferedIO: YES

defaults:
    run:
        shell: bash

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    Run-CodeQL:
        name: Run CodeQL
        permissions:
            security-events: write
        runs-on: macos-15

        steps:
            # - name: Select latest installed Xcode version
            #   uses: maxim-lobanov/setup-xcode@master
            #   with:
            #     xcode-version: latest

            # - name: Checkout Build.txt from Xcode mirror
            #   uses: actions/checkout@main
            #   with:
            #     repository: F1248/Xcode-Mirror
            #     token: ${{ secrets.XCODE_MIRROR_TOKEN }}
            #     sparse-checkout: Build.txt
            #     sparse-checkout-cone-mode: false

            # - name: Check if latest Xcode version is installed
            #   run: |
            #     if [[ "$(xcodebuild -version | sed -n "s/Build version //p")" == "$(cat Build.txt)" ]]; then
            #         echo latest_xcode_version_installed=true >> "$GITHUB_ENV"
            #     else
            #         echo latest_xcode_version_installed=false >> "$GITHUB_ENV"
            #     fi

            - name: Checkout Xcode mirror
            #   if: env.latest_xcode_version_installed == 'false' # Work around workaround for https://github.com/github/codeql-action/issues/2506 not working with preinstalled Xcode
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                # sparse-checkout: Xcode.xip-*

            - name: Install unxip
            #   if: env.latest_xcode_version_installed == 'false' # Work around workaround for https://github.com/github/codeql-action/issues/2506 not working with preinstalled Xcode
              run: |
                curl --remote-name --location https://github.com/saagarjha/unxip/releases/latest/download/unxip
                chmod +x unxip
                echo "$(./unxip --version) installed"

            - name: Install and select Xcode
            #   if: env.latest_xcode_version_installed == 'false' # Work around workaround for https://github.com/github/codeql-action/issues/2506 not working with preinstalled Xcode
              run: |
                cat Xcode.xip-* | ./unxip -
                sudo xcode-select --switch Xcode*.app
                sudo xcodebuild -runFirstLaunch

            - name: Log selected Xcode version
              run: echo "$(xcodebuild -version | tr "\n" " ")selected"

            - name: Checkout
              uses: actions/checkout@main

            - name: Install xcbeautify
              run: |
                tag=$(gh release --repo cpisciotta/xcbeautify list --json tagName --limit 1 | cut -d "\"" -f 4)
                curl --location https://github.com/cpisciotta/xcbeautify/releases/download/"$tag"/xcbeautify-"$tag"-arm64-apple-macosx.zip --output xcbeautify.zip
                unzip xcbeautify.zip
                echo "xcbeautify $(./xcbeautify --version) installed"

            - name: Work around https://github.com/github/codeql-action/issues/2506
              run: |
                xcode_developer_directory=$(xcode-select --print-path)
                ln "$xcode_developer_directory"/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/host/*.dylib "$xcode_developer_directory"/Toolchains/XcodeDefault.xctoolchain/usr/lib
                sudo mkdir /usr/local/lib
                sudo ln "$xcode_developer_directory"/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/host/*.dylib /usr/local/lib

            - name: Initialize CodeQL
              uses: github/codeql-action/init@main
              with:
                languages: swift
                queries: security-and-quality

            - name: Build Genius
              run: xcodebuild build-for-testing -scheme Genius -destination generic/platform=macOS -skipPackagePluginValidation | ./xcbeautify --disable-logging --renderer github-actions

            - name: Run CodeQL
              uses: github/codeql-action/analyze@main

            - name: Evaluate CodeQL results
              run: |
                if [[ $(jq ".runs[0].results | length == 0" ../results/swift.sarif) != true ]]; then
                    echo "CodeQL alerts found!"
                    exit 1
                fi

    Run-Periphery:
        name: Run Periphery
        runs-on: macos-15

        steps:
            - name: Select latest installed Xcode version
              uses: maxim-lobanov/setup-xcode@master
              with:
                xcode-version: latest

            - name: Checkout Build.txt from Xcode mirror
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Build.txt
                sparse-checkout-cone-mode: false

            - name: Check if latest Xcode version is installed
              run: |
                if [[ "$(xcodebuild -version | sed -n "s/Build version //p")" == "$(cat Build.txt)" ]]; then
                    echo latest_xcode_version_installed=true >> "$GITHUB_ENV"
                else
                    echo latest_xcode_version_installed=false >> "$GITHUB_ENV"
                fi

            - name: Checkout Xcode mirror
              if: env.latest_xcode_version_installed == 'false'
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Xcode.xip-*

            - name: Install unxip
              if: env.latest_xcode_version_installed == 'false'
              run: |
                curl --remote-name --location https://github.com/saagarjha/unxip/releases/latest/download/unxip
                chmod +x unxip
                echo "$(./unxip --version) installed"

            - name: Install and select Xcode
              if: env.latest_xcode_version_installed == 'false'
              run: |
                cat Xcode.xip-* | ./unxip -
                sudo xcode-select --switch Xcode*.app
                sudo xcodebuild -runFirstLaunch

            - name: Log selected Xcode version
              run: echo "$(xcodebuild -version | tr "\n" " ")selected"

            - name: Checkout
              uses: actions/checkout@main

            - name: Install Periphery
              run: |
                tag=$(gh release --repo peripheryapp/periphery list --json tagName --limit 1 | cut -d "\"" -f 4)
                curl --location https://github.com/peripheryapp/periphery/releases/download/"$tag"/periphery-"$tag".zip --output periphery.zip
                unzip periphery.zip
                echo "Periphery $(./periphery version) installed"

            - name: Run Periphery
              run: ./periphery scan --format github-actions --relative-results --strict -- -skipPackagePluginValidation

    Run-SwiftFormat:
        name: Run SwiftFormat
        runs-on: macos-15

        steps:
            - name: Checkout
              uses: actions/checkout@main
              with:
                fetch-depth: 0

            - name: Install SwiftFormat
              run: |
                curl --remote-name --location https://github.com/nicklockwood/SwiftFormat/releases/latest/download/swiftformat.zip
                unzip swiftformat.zip
                echo "SwiftFormat $(./swiftformat --version) installed"

            - name: Run SwiftFormat
              run: ./swiftformat --lint . --reporter github-actions-log

    Run-SwiftLint:
        name: Run SwiftLint
        runs-on: macos-15

        steps:
            - name: Select latest installed Xcode version
              uses: maxim-lobanov/setup-xcode@master
              with:
                xcode-version: latest

            - name: Checkout Build.txt from Xcode mirror
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Build.txt
                sparse-checkout-cone-mode: false

            - name: Check if latest Xcode version is installed
              run: |
                if [[ "$(xcodebuild -version | sed -n "s/Build version //p")" == "$(cat Build.txt)" ]]; then
                    echo latest_xcode_version_installed=true >> "$GITHUB_ENV"
                else
                    echo latest_xcode_version_installed=false >> "$GITHUB_ENV"
                fi

            - name: Checkout Xcode mirror
              if: env.latest_xcode_version_installed == 'false'
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Xcode.xip-*

            - name: Install unxip
              if: env.latest_xcode_version_installed == 'false'
              run: |
                curl --remote-name --location https://github.com/saagarjha/unxip/releases/latest/download/unxip
                chmod +x unxip
                echo "$(./unxip --version) installed"

            - name: Install and select Xcode
              if: env.latest_xcode_version_installed == 'false'
              run: |
                cat Xcode.xip-* | ./unxip -
                sudo xcode-select --switch Xcode*.app
                sudo xcodebuild -runFirstLaunch

            - name: Log selected Xcode version
              run: echo "$(xcodebuild -version | tr "\n" " ")selected"

            - name: Checkout
              uses: actions/checkout@main

            - name: Install SwiftLint
              run: |
                curl --remote-name --location https://github.com/realm/SwiftLint/releases/latest/download/portable_swiftlint.zip
                unzip portable_swiftlint.zip
                echo "SwiftLint $(./swiftlint version) installed"

            - name: Run SwiftLint lint rules
              run: ./swiftlint lint --strict --reporter github-actions-logging

            - name: Install xcbeautify
              run: |
                tag=$(gh release --repo cpisciotta/xcbeautify list --json tagName --limit 1 | cut -d "\"" -f 4)
                curl --location https://github.com/cpisciotta/xcbeautify/releases/download/"$tag"/xcbeautify-"$tag"-arm64-apple-macosx.zip --output xcbeautify.zip
                unzip xcbeautify.zip
                echo "xcbeautify $(./xcbeautify --version) installed"

            - name: Build Genius
              run: xcodebuild build-for-testing -scheme Genius -destination generic/platform=macOS -skipPackagePluginValidation | tee xcodebuild.log | ./xcbeautify --disable-logging --renderer github-actions

            - name: Run SwiftLint analyzer rules
              run: ./swiftlint analyze --strict --reporter github-actions-logging --compiler-log-path xcodebuild.log

    Run-tests:
        name: Run tests
        runs-on: macos-15

        steps:
            - name: Select latest installed Xcode version
              uses: maxim-lobanov/setup-xcode@master
              with:
                xcode-version: latest

            - name: Checkout Build.txt from Xcode mirror
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Build.txt
                sparse-checkout-cone-mode: false

            - name: Check if latest Xcode version is installed
              run: |
                if [[ "$(xcodebuild -version | sed -n "s/Build version //p")" == "$(cat Build.txt)" ]]; then
                    echo latest_xcode_version_installed=true >> "$GITHUB_ENV"
                else
                    echo latest_xcode_version_installed=false >> "$GITHUB_ENV"
                fi

            - name: Checkout Xcode mirror
              if: env.latest_xcode_version_installed == 'false'
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Xcode.xip-*

            - name: Install unxip
              if: env.latest_xcode_version_installed == 'false'
              run: |
                curl --remote-name --location https://github.com/saagarjha/unxip/releases/latest/download/unxip
                chmod +x unxip
                echo "$(./unxip --version) installed"

            - name: Install and select Xcode
              if: env.latest_xcode_version_installed == 'false'
              run: |
                cat Xcode.xip-* | ./unxip -
                sudo xcode-select --switch Xcode*.app
                sudo xcodebuild -runFirstLaunch

            - name: Log selected Xcode version
              run: echo "$(xcodebuild -version | tr "\n" " ")selected"

            - name: Checkout
              uses: actions/checkout@main

            - name: Install xcbeautify
              run: |
                tag=$(gh release --repo cpisciotta/xcbeautify list --json tagName --limit 1 | cut -d "\"" -f 4)
                curl --location https://github.com/cpisciotta/xcbeautify/releases/download/"$tag"/xcbeautify-"$tag"-arm64-apple-macosx.zip --output xcbeautify.zip
                unzip xcbeautify.zip
                echo "xcbeautify $(./xcbeautify --version) installed"

            - name: Run tests
              run: xcodebuild test -scheme Genius -destination platform=macOS,arch=arm64 -skipPackagePluginValidation | ./xcbeautify --disable-logging --renderer github-actions

    Build-Genius:
        name: Build Genius
        permissions:
            attestations: write
            id-token: write
        runs-on: macos-15

        steps:
            - name: Select latest installed Xcode version
              uses: maxim-lobanov/setup-xcode@master
              with:
                xcode-version: latest

            - name: Checkout Build.txt from Xcode mirror
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Build.txt
                sparse-checkout-cone-mode: false

            - name: Check if latest Xcode version is installed
              run: |
                if [[ "$(xcodebuild -version | sed -n "s/Build version //p")" == "$(cat Build.txt)" ]]; then
                    echo latest_xcode_version_installed=true >> "$GITHUB_ENV"
                else
                    echo latest_xcode_version_installed=false >> "$GITHUB_ENV"
                fi

            - name: Checkout Xcode mirror
              if: env.latest_xcode_version_installed == 'false'
              uses: actions/checkout@main
              with:
                repository: F1248/Xcode-Mirror
                token: ${{ secrets.XCODE_MIRROR_TOKEN }}
                sparse-checkout: Xcode.xip-*

            - name: Install unxip
              if: env.latest_xcode_version_installed == 'false'
              run: |
                curl --remote-name --location https://github.com/saagarjha/unxip/releases/latest/download/unxip
                chmod +x unxip
                echo "$(./unxip --version) installed"

            - name: Install and select Xcode
              if: env.latest_xcode_version_installed == 'false'
              run: |
                cat Xcode.xip-* | ./unxip -
                sudo xcode-select --switch Xcode*.app
                sudo xcodebuild -runFirstLaunch

            - name: Log selected Xcode version
              run: echo "$(xcodebuild -version | tr "\n" " ")selected"

            - name: Checkout
              uses: actions/checkout@main

            - name: Install xcbeautify
              run: |
                tag=$(gh release --repo cpisciotta/xcbeautify list --json tagName --limit 1 | cut -d "\"" -f 4)
                curl --location https://github.com/cpisciotta/xcbeautify/releases/download/"$tag"/xcbeautify-"$tag"-arm64-apple-macosx.zip --output xcbeautify.zip
                unzip xcbeautify.zip
                echo "xcbeautify $(./xcbeautify --version) installed"

            - name: Build Genius
              run: xcodebuild archive -scheme Genius -destination generic/platform=macOS -archivePath Genius -skipPackagePluginValidation | ./xcbeautify --disable-logging --renderer github-actions

            - name: Zip Genius
              run: |
                mv Genius.xcarchive/Products/Applications/Genius.app .
                zip --recurse-paths Genius.zip Genius.app

            - name: Attest build provenance
              uses: actions/attest-build-provenance@main
              with:
                subject-path: Genius.zip

            - name: Upload Genius
              uses: actions/upload-artifact@main
              with:
                name: Genius
                path: Genius.zip

            - name: Zip debug symbols
              run: |
                mv Genius.xcarchive/dSYMs/Genius.app.dSYM .
                zip --recurse-paths Debug-Symbols.zip Genius.app.dSYM

            - name: Upload debug symbols
              uses: actions/upload-artifact@main
              with:
                name: Debug Symbols
                path: Debug-Symbols.zip
